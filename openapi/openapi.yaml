openapi: 3.0.3
info:
  title: MCP Router API
  description: API for the MCP Router which manages MCP servers
  version: 1.0.0
  contact:
    name: MCP Router Local API
servers:
  - url: http://localhost:3282
    description: MCP Router local server

tags:
  - name: logs
    description: Operations related to log management
  - name: servers
    description: Operations related to MCP server management
  - name: apps
    description: Operations related to MCP applications
  - name: mcp
    description: MCP protocol operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Error message
          
    LogEntry:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the log entry
        timestamp:
          type: string
          format: date-time
          description: When the log entry was created
        clientId:
          type: string
          description: ID of the client that made the request
        serverId:
          type: string
          description: ID of the server that processed the request
        requestType:
          type: string
          description: Type of request (e.g., completion, embedding)
        requestData:
          type: object
          description: The request data
        responseData:
          type: object
          description: The response data
        status:
          type: string
          enum: [success, error]
          description: Status of the request
        duration:
          type: number
          description: Duration of the request processing in milliseconds
          
    LogsResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
        total:
          type: integer
          description: Total number of logs matching the query
        offset:
          type: integer
          description: Offset used in the query
        limit:
          type: integer
          description: Limit used in the query

    StatsResponse:
      type: object
      properties:
        clientStats:
          type: object
          additionalProperties:
            type: integer
          description: Request counts grouped by client ID
        serverStats:
          type: object
          additionalProperties:
            type: integer
          description: Request counts grouped by server ID
        requestTypeStats:
          type: object
          additionalProperties:
            type: integer
          description: Request counts grouped by request type

    ClientsResponse:
      type: object
      properties:
        clients:
          type: array
          items:
            type: string
          description: List of available client IDs
          
    McpApp:
      type: object
      properties:
        name:
          type: string
          description: Name of the MCP app
        installed:
          type: boolean
          description: Whether the app is installed
        configPath:
          type: string
          description: Path to the app's configuration file
        configured:
          type: boolean
          description: Whether the app is configured
        token:
          type: string
          description: App's token (if available)
        serverIds:
          type: array
          items:
            type: string
          description: IDs of servers the app has access to
        isCustom:
          type: boolean
          description: Whether the app is a custom app
          
    AppsResponse:
      type: object
      properties:
        apps:
          type: array
          items:
            $ref: '#/components/schemas/McpApp'
          description: List of MCP apps

    TypesResponse:
      type: object
      properties:
        types:
          type: array
          items:
            type: string
          description: List of available request types

    Server:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the server
        name:
          type: string
          description: Name of the server
        url:
          type: string
          description: URL of the server
        description:
          type: string
          description: Description of the server
        status:
          type: string
          enum: [online, offline, error]
          description: Status of the server
        capabilities:
          type: array
          items:
            type: string
          description: List of capabilities supported by the server

    McpRequest:
      type: object
      properties:
        jsonrpc:
          type: string
          enum: ['2.0']
          description: JSON-RPC version
        method:
          type: string
          description: The MCP method to call
        params:
          type: object
          description: Method parameters
        id:
          type: string
          description: Request identifier
          
    McpResponse:
      type: object
      properties:
        jsonrpc:
          type: string
          enum: ['2.0']
          description: JSON-RPC version
        result:
          type: object
          description: Result of the method call (if successful)
        error:
          type: object
          properties:
            code:
              type: integer
              description: Error code
            message:
              type: string
              description: Error message
            data:
              type: object
              description: Additional error data
        id:
          type: string
          description: Request identifier matching the request
          
    ServerImportConfig:
      type: object
      required:
        - command
        - args
      properties:
        command:
          type: string
          description: Command to execute to run the server
        args:
          type: array
          items:
            type: string
          description: Arguments to pass to the command
        env:
          type: object
          additionalProperties:
            type: string
          description: Environment variables for the server

    ServerImportResult:
      type: object
      properties:
        name:
          type: string
          description: The server name from configuration
        success:
          type: boolean
          description: Indicates whether the server was successfully added or if an error occurred
        message:
          type: string
          description: Success or error message explaining the outcome

    ServerImportResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ServerImportResult'
          description: An array detailing the outcome for each server configuration provided

security:
  - bearerAuth: []

paths:
              
  /api/logs:
    get:
      tags:
        - logs
      summary: Get logs
      description: Retrieve logs with filtering and pagination
      parameters:
        - name: clientId
          in: query
          required: false
          schema:
            type: string
          description: Filter logs by client ID
        - name: serverId
          in: query
          required: false
          schema:
            type: string
          description: Filter logs by server ID
        - name: requestType
          in: query
          required: false
          schema:
            type: string
          description: Filter logs by request type
        - name: responseStatus
          in: query
          required: false
          schema:
            type: string
            enum: [success, error]
          description: Filter logs by response status
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter logs after this date
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter logs before this date
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Number of items to skip
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
          description: Maximum number of items to return
      responses:
        '200':
          description: List of logs matching the query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /api/logs/stats:
    get:
      tags:
        - logs
      summary: Get log statistics
      description: Retrieve statistics about the logs
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [client, server, requestType]
          description: Type of statistics to return
      responses:
        '200':
          description: Log statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /api/logs/clients:
    get:
      tags:
        - logs
      summary: Get available client IDs
      description: Retrieve a list of all client IDs that appear in the logs
      responses:
        '200':
          description: List of client IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /api/logs/types:
    get:
      tags:
        - logs
      summary: Get available request types
      description: Retrieve a list of all request types that appear in the logs
      responses:
        '200':
          description: List of request types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /api/logs/{id}:
    get:
      tags:
        - logs
      summary: Get log by ID
      description: Retrieve a specific log entry by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the log to retrieve
      responses:
        '200':
          description: Log entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogEntry'
        '404':
          description: Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /mcp:
    post:
      tags:
        - mcp
      summary: Process MCP request
      description: Process a Model Context Protocol request and forward it to the appropriate server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/McpRequest'
      responses:
        '200':
          description: MCP response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /api/apps:
    get:
      tags:
        - apps
      summary: List MCP apps
      description: Retrieve a list of all MCP apps
      responses:
        '200':
          description: List of MCP apps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/servers/{id}/start:
    post:
      tags:
        - servers
      summary: Start MCP server
      description: Start a specific MCP server by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the server to start
      responses:
        '200':
          description: Server started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the server was started successfully
                  message:
                    type: string
                    description: Success message
                  status:
                    type: string
                    description: Current status of the server
        '400':
          description: Missing server ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to start server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/servers/{id}/stop:
    post:
      tags:
        - servers
      summary: Stop MCP server
      description: Stop a specific MCP server by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the server to stop
      responses:
        '200':
          description: Server stopped successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the server was stopped successfully
                  message:
                    type: string
                    description: Success message
                  status:
                    type: string
                    description: Current status of the server
        '400':
          description: Missing server ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to stop server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/servers:
    get:
      tags:
        - servers
      summary: List MCP servers
      description: Retrieve a list of all configured MCP servers
      responses:
        '200':
          description: List of MCP servers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - servers
      summary: Add new MCP servers from JSON configuration
      description: Create one or more MCP server configurations from a JSON format similar to .mcpr config files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    mcpServers:
                      type: object
                      additionalProperties:
                        $ref: '#/components/schemas/ServerImportConfig'
                - type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ServerImportConfig'
            examples:
              withWrapper:
                summary: Configuration with mcpServers wrapper
                value:
                  mcpServers:
                    puppeteer:
                      command: npx
                      args: ["-y", "@modelcontextprotocol/server-puppeteer"]
                      env:
                        PUPPETEER_LAUNCH_OPTIONS: "{ \"headless\": false }"
                        ALLOW_DANGEROUS: "true"
              direct:
                summary: Direct configuration without wrapper
                value:
                  puppeteer:
                    command: npx
                    args: ["-y", "@modelcontextprotocol/server-puppeteer"]
                    env:
                      PUPPETEER_LAUNCH_OPTIONS: "{ \"headless\": false }"
                      ALLOW_DANGEROUS: "true"
      responses:
        '201':
          description: At least one server created successfully. The response details the outcome for each attempted server addition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerImportResponse'
        '400':
          description: Invalid server configuration format, or all provided server configurations resulted in errors during processing or addition.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error'
                  - $ref: '#/components/schemas/ServerImportResponse'
        '500':
          description: Internal server error during the server addition process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
