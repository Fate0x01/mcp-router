openapi: 3.0.3
info:
  title: MCP Router API
  description: |-
    The MCP Router API provides comprehensive access to Model Context Protocol (MCP) servers management.
    This API allows developers to start, stop, and monitor MCP servers, manage MCP applications,
    view detailed logs of request/response interactions, and directly process MCP protocol requests.
    
    API Versioning:
    - All management endpoints are prefixed with version identifier (/v0/...)
    - The core MCP endpoint (/mcp) is not versioned for direct compatibility with client applications
    
    Authentication:
    - All endpoints require Bearer token authentication
    - Different endpoints require different token scopes (see security schemes)
  version: 1.0.0
servers:
  - url: http://localhost:3282
    description: MCP Router server running in local environment (using default port 3282)

tags:
  - name: logs
    description: Operations related to comprehensive logging of all MCP server interactions, including detailed request/response data, filtering capabilities, and statistical analysis
  - name: servers
    description: Operations for managing MCP servers, including listing available servers, starting and stopping server instances, and importing server configurations from JSON
  - name: apps
    description: Operations for managing MCP applications that interact with servers, including configuration status, installation state, and associated server access permissions
  - name: mcp
    description: Direct Model Context Protocol operations following the JSON-RPC 2.0 specification for communicating with MCP-compatible AI models

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: |-
        Authentication uses Bearer token format. The token can be provided directly or with 'Bearer ' prefix.
        Different API endpoints may require different token scopes:
        - /v0/servers/* requires MCP_SERVER_MANAGEMENT scope
        - /v0/logs/* requires LOG_MANAGEMENT scope
        - /v0/apps requires APPLICATION scope
        - /mcp endpoint doesn't require a specific scope but still requires authentication
      
  schemas:
    Error:
      type: object
      description: Standardized error response structure returned when API operations fail
      properties:
        error:
          type: object
          description: Container for error details
          properties:
            code:
              type: string
              description: Machine-readable error code that identifies the error type (e.g., "SERVER_NOT_FOUND", "INVALID_REQUEST")
            message:
              type: string
              description: Human-readable description of the error with additional context about what went wrong
          
    LogEntry:
      type: object
      description: Detailed record of an individual MCP request/response interaction that passed through the router
      properties:
        id:
          type: string
          description: Unique identifier for the log entry, can be used to retrieve specific log details
        timestamp:
          type: number
          description: UNIX timestamp in milliseconds indicating when the log entry was created
        clientId:
          type: string
          description: Identifier for the client application that initiated the MCP request
        clientName:
          type: string
          description: Human-readable name for the client application
        serverId:
          type: string
          description: Identifier for the MCP server that processed the request
        serverName:
          type: string
          description: Human-readable name for the MCP server
        requestType:
          type: string
          description: Classification of the request (e.g., 'CallTool', 'StartServer', 'generateText')
        requestParams:
          type: object
          description: Complete JSON payload of the original request sent to the MCP server
        responseStatus:
          type: string
          enum: [success, error]
          description: Outcome status of the request processing (success or error)
        responseData:
          type: object
          description: Complete JSON response returned from the MCP server
        duration:
          type: number
          description: Total processing time in milliseconds, from request receipt to response delivery
        errorMessage:
          type: string
          nullable: true
          description: Error message if the request failed, null otherwise

    LogsResponse:
      type: object
      description: Paginated response structure for log queries that includes metadata for pagination control
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
          description: Array of log entries matching the query parameters
        total:
          type: integer
          description: Total number of logs matching the query criteria across all pages
        offset:
          type: integer
          description: Starting position (zero-based) of the returned results in the complete result set
        limit:
          type: integer
          description: Maximum number of entries returned per page, used for calculating total pages

    StatsResponse:
      type: object
      description: Statistical aggregation of MCP request activity across different dimensions
      properties:
        clientStats:
          type: array
          items:
            type: object
            properties:
              clientId:
                type: string
                description: Unique identifier for the client application
              clientName:
                type: string
                description: Human-readable name for the client application
              requestCount:
                type: integer
                description: Number of requests made by this client
          description: Request counts grouped by client, with detailed client information
        serverStats:
          type: array
          items:
            type: object
            properties:
              serverId:
                type: string
                description: Unique identifier for the server
              serverName:
                type: string
                description: Human-readable name for the server
              requestCount:
                type: integer
                description: Number of requests processed by this server
          description: Request counts grouped by server, with detailed server information
        requestTypeStats:
          type: array
          items:
            type: object
            properties:
              requestType:
                type: string
                description: Name of the MCP method or request type
              count:
                type: integer
                description: Number of times this request type has been called
          description: Request counts grouped by request type, with detailed method information

    ClientsResponse:
      type: object
      description: Collection of all unique client identifiers that have interacted with the MCP Router
      properties:
        clients:
          type: array
          items:
            type: string
          description: Array of unique client identifier strings, derived from all historical log entries
          
    McpApp:
      type: object
      description: Represents an application that connects to MCP servers through the router
      properties:
        name:
          type: string
          description: Unique name identifier for the MCP app, used in configuration and authentication
        installed:
          type: boolean
          description: Indicates whether the app's package/binary is properly installed in the system
        configured:
          type: boolean
          description: Indicates whether all required configuration values have been properly set for the app to function
        servers:
          type: array
          items:
            type: string
          description: List of server identifiers that this app is authorized to access, controlling permission boundaries
        official:
          type: boolean
          description: Distinguishes between pre-packaged official apps (true) and user-created custom applications (false)
        scopes:
          type: array
          items:
            type: string
          description: List of permission scopes that this app has been granted
          
    AppsResponse:
      type: object
      description: Container for the collection of MCP application configurations registered in the system
      properties:
        apps:
          type: array
          items:
            $ref: '#/components/schemas/McpApp'
          description: Array of detailed MCP application objects with their complete configuration state

    TypesResponse:
      type: object
      description: Collection of all unique MCP method types that have been processed by the router
      properties:
        types:
          type: array
          items:
            type: string
          description: Array of unique MCP method name strings (e.g., "generateText", "generateEmbedding") encountered in the logs

    Server:
      type: object
      description: Represents an MCP server instance that can be managed through the router
      properties:
        id:
          type: string
          description: Unique identifier for the server, used in API endpoints that target specific servers
        name:
          type: string
          description: Human-readable display name of the server (e.g., "OpenAI GPT-4", "Anthropic Claude")
        description:
          type: string
          description: Detailed information about the server's purpose, models it provides access to, or special features
        status:
          type: string
          enum: [online, offline, error]
          description: Current operational status of the server (online = ready to accept requests, offline = not running, error = encountered issues)
        version:
          type: string
          description: Version information of the MCP server

    McpRequest:
      type: object
      description: JSON-RPC 2.0 formatted request conforming to the Model Context Protocol specification
      properties:
        jsonrpc:
          type: string
          enum: ['2.0']
          description: JSON-RPC version identifier, must be exactly "2.0" for all MCP protocol requests
        method:
          type: string
          description: The MCP method to invoke (e.g., "generateText", "generateEmbedding", "getToolResponse")
        params:
          type: object
          description: Method-specific parameters containing the input data required for the model to process
        id:
          type: string
          description: Client-generated unique identifier for the request, used to match responses with requests in asynchronous environments
          
    McpResponse:
      type: object
      description: JSON-RPC 2.0 formatted response from an MCP server containing either result or error data
      properties:
        jsonrpc:
          type: string
          enum: ['2.0']
          description: JSON-RPC version identifier, always "2.0" in valid MCP protocol responses
        result:
          type: object
          description: Method-specific result data returned when the request was successfully processed (mutually exclusive with error)
        error:
          type: object
          description: Error information returned when the request failed (mutually exclusive with result)
          properties:
            code:
              type: integer
              description: Numeric error code following JSON-RPC 2.0 standard (-32700 to -32603) or MCP-specific error codes
            message:
              type: string
              description: Human-readable error description that explains what went wrong
            data:
              type: object
              description: Optional additional structured data that provides more context about the error
        id:
          type: string
          description: The request identifier value from the original request, enabling clients to match responses to their requests
          
    ServerImportConfig:
      type: object
      description: Configuration structure for importing a new MCP server, compatible with .mcpr configuration format
      required:
        - command
        - args
      properties:
        command:
          type: string
          description: Primary executable command to run the server (e.g., "node", "python", "npx", "docker")
        args:
          type: array
          items:
            type: string
          description: Command-line arguments to pass to the server command (e.g., ["-y", "@modelcontextprotocol/server-openai"])
        env:
          type: object
          additionalProperties:
            type: string
          description: Key-value pairs of environment variables needed by the server (e.g., API keys, configuration options)

    ServerImportResult:
      type: object
      description: Result information about an attempted server import operation
      properties:
        name:
          type: string
          description: The server identifier/name extracted from the import configuration
        success:
          type: boolean
          description: Boolean flag indicating whether the server was successfully imported and configured
        message:
          type: string
          description: Detailed explanation of the import result, including success confirmation or specific error reason

    ServerImportResponse:
      type: object
      description: Response containing the detailed results of a server import operation for multiple server configurations
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ServerImportResult'
          description: Array detailing the outcome (success or failure) for each server configuration provided in the request, with each entry containing the server name and detailed status information

    ServersResponse:
      type: object
      description: Response containing the list of all MCP servers configured in the router
      properties:
        servers:
          type: array
          items:
            $ref: '#/components/schemas/Server'
          description: Array of server objects containing server details

paths:
              
  /v0/logs:
    get:
      tags:
        - logs
      security:
        - bearerAuth: []
      summary: Get logs
      description: |-
        Retrieves detailed request/response logs with comprehensive filtering options and pagination support.
        This endpoint allows querying logs by multiple criteria including client, server, date range, and request type.
        Results can be paginated for handling large log volumes efficiently.
      parameters:
        - name: clientId
          in: query
          required: false
          schema:
            type: string
          description: Filter logs to show only those from a specific client application, using the client's unique identifier
        - name: serverId
          in: query
          required: false
          schema:
            type: string
          description: Filter logs to show only those processed by a specific MCP server, using the server's unique identifier
        - name: requestType
          in: query
          required: false
          schema:
            type: string
          description: Filter logs to show only specific MCP operation types (e.g., "generateText", "generateEmbedding")
        - name: responseStatus
          in: query
          required: false
          schema:
            type: string
            enum: [success, error]
          description: Filter logs by response status
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter logs to include only those created on or after this ISO 8601 formatted timestamp (e.g., "2023-04-01T00:00:00Z")
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter logs to include only those created on or before this ISO 8601 formatted timestamp (e.g., "2023-04-30T23:59:59Z")
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Number of items to skip
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
          description: Maximum number of items to return
      responses:
        '200':
          description: Successfully retrieved logs matching the specified filters with pagination metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponse'
        '500':
          description: Server encountered an error while processing the request, such as database connection issues or internal processing errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /v0/logs/stats:
    get:
      tags:
        - logs
      security:
        - bearerAuth: []
      summary: Get log statistics
      description: |-
        Retrieves aggregated statistical information about the logged MCP requests.
        Provides usage metrics grouped by different dimensions (clients, servers, or request types).
        This endpoint is useful for monitoring system activity, analyzing usage patterns,
        and identifying the most heavily used components of your MCP Router deployment.
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [client, server, requestType]
          description: Type of statistics to return
      responses:
        '200':
          description: Log statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /v0/logs/clients:
    get:
      tags:
        - logs
      security:
        - bearerAuth: []
      summary: Get available client IDs
      description: |-
        Retrieves a list of all unique client identifiers that have made requests through the router.
        This endpoint provides a comprehensive inventory of all client applications that have interacted
        with MCP servers through this router instance, based on the historical log data.
        The results are useful for filtering logs by client, monitoring client activity,
        and identifying active versus inactive clients in the system.
      responses:
        '200':
          description: List of client IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /v0/logs/types:
    get:
      tags:
        - logs
      security:
        - bearerAuth: []
      summary: Get available request types
      description: |-
        Retrieves a list of all unique MCP request method types that have been processed by the router.
        This endpoint identifies the variety of Model Context Protocol operations that have been used,
        such as 'generateText', 'generateEmbedding', or custom methods implemented by specific servers.
        The results provide insights into which MCP capabilities are being utilized in your deployment
        and can help with filtering log data for analysis of specific operation types.
      responses:
        '200':
          description: List of request types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /v0/logs/{id}:
    get:
      tags:
        - logs
      security:
        - bearerAuth: []
      summary: Get log by ID
      description: |-
        Retrieves detailed information about a specific MCP request/response interaction by its unique identifier.
        This endpoint provides the complete data about a particular logged interaction, including:
        full request and response payloads, timing information, client and server identifiers,
        status information, and request type classification.
        It's particularly useful for debugging specific issues, auditing individual interactions,
        or retrieving the complete context of a particular MCP request for analysis.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the log to retrieve
      responses:
        '200':
          description: Log entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogEntry'
        '404':
          description: Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /mcp:
    post:
      tags:
        - mcp
      summary: Process MCP request
      security:
        - bearerAuth: []
      description: |-
        Primary endpoint for processing Model Context Protocol requests according to the JSON-RPC 2.0 specification.
        This endpoint accepts MCP-compliant requests, routes them to the appropriate server based on configurations,
        handles authentication, performs request validation, logs the interaction, and forwards the response back to the client.
        It serves as the central communication channel between MCP clients and the various model servers managed by the router.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/McpRequest'
      responses:
        '200':
          description: Successfully processed MCP request and received valid response from the target server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpResponse'
        '400':
          description: Request validation failed due to malformed JSON-RPC format, missing required fields, or invalid method parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server-side error occurred during request processing, such as target server unavailability, timeout, or internal router error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /v0/apps:
    get:
      tags:
        - apps
      security:
        - bearerAuth: []
      summary: List MCP apps
      description: |-
        Retrieves comprehensive information about all MCP applications registered with the router.
        Returns detailed data for each app including its name, installation status, configuration path,
        configured state, authentication tokens (if available), authorized server access permissions,
        and whether it's a custom or pre-packaged application.
        This endpoint is essential for managing application access control and monitoring app status.
      responses:
        '200':
          description: List of MCP apps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppsResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /v0/servers/{id}/start:
    post:
      tags:
        - servers
      security:
        - bearerAuth: []
      summary: Start MCP server
      description: |-
        Launches an MCP server instance identified by its unique ID.
        This endpoint executes the server's configured command with appropriate arguments and environment variables.
        The server process is monitored by the router, and its status is updated accordingly.
        If the server is already running, the request will return the current status without restarting the server.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the server to start
      responses:
        '200':
          description: Server started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the server was started successfully
                  message:
                    type: string
                    description: Success message
                  status:
                    type: string
                    description: Current status of the server
        '400':
          description: Missing server ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to start server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v0/servers/{id}/stop:
    post:
      tags:
        - servers
      security:
        - bearerAuth: []
      summary: Stop MCP server
      description: |-
        Gracefully terminates a running MCP server instance identified by its unique ID.
        This endpoint attempts to properly shut down the server process, allowing it to clean up resources.
        If the server doesn't respond to the graceful shutdown request within a timeout period,
        it may forcefully terminate the process to ensure system resources are released.
        Once stopped, the server's status is updated to reflect its offline state.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the server to stop
      responses:
        '200':
          description: Server stopped successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the server was stopped successfully
                  message:
                    type: string
                    description: Success message
                  status:
                    type: string
                    description: Current status of the server
        '400':
          description: Missing server ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to stop server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v0/servers:
    get:
      tags:
        - servers
      security:
        - bearerAuth: []
      summary: List MCP servers
      description: |-
        Retrieves a comprehensive list of all MCP servers configured in the router.
        For each server, returns detailed information including identifier, name, description,
        current operational status (online, offline, or error), and version.
        This endpoint provides a complete overview of all available model servers in the system,
        making it useful for UI displays, server selection, and system monitoring.
      responses:
        '200':
          description: List of MCP servers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServersResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - servers
      security:
        - bearerAuth: []
      summary: Add new MCP servers from JSON configuration
      description: |-
        Creates one or more MCP server configurations from a structured JSON input.
        This endpoint accepts configurations in a format compatible with .mcpr config files,
        making it easy to import existing server definitions or programmatically create new ones.
        Each server configuration must specify the command and arguments needed to start the server,
        and can optionally include environment variables for server customization.
        The endpoint validates each server configuration, attempts to register it in the system,
        and returns detailed results about the success or failure of each server import operation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    mcpServers:
                      type: object
                      additionalProperties:
                        $ref: '#/components/schemas/ServerImportConfig'
                - type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ServerImportConfig'
            examples:
              withWrapper:
                summary: Configuration with mcpServers wrapper
                value:
                  mcpServers:
                    puppeteer:
                      command: npx
                      args: ["-y", "@modelcontextprotocol/server-puppeteer"]
                      env:
                        PUPPETEER_LAUNCH_OPTIONS: "{ \"headless\": false }"
                        ALLOW_DANGEROUS: "true"
              direct:
                summary: Direct configuration without wrapper
                value:
                  puppeteer:
                    command: npx
                    args: ["-y", "@modelcontextprotocol/server-puppeteer"]
                    env:
                      PUPPETEER_LAUNCH_OPTIONS: "{ \"headless\": false }"
                      ALLOW_DANGEROUS: "true"
      responses:
        '201':
          description: At least one server created successfully. The response details the outcome for each attempted server addition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerImportResponse'
        '400':
          description: Invalid server configuration format, or all provided server configurations resulted in errors during processing or addition.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error'
                  - $ref: '#/components/schemas/ServerImportResponse'
        '500':
          description: Internal server error during the server addition process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
